/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!*********************!*\
  !*** ./src/Util.ts ***!
  \*********************/
/*! exports provided: numToString, shuffleArray, sortArray, isType, toBoolean, initSerialNumArray */
/*! exports used: isType, toBoolean */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* unused harmony export numToString */\n/* unused harmony export shuffleArray */\n/* unused harmony export sortArray */\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = isType;\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = toBoolean;\n/* unused harmony export initSerialNumArray */\nfunction numToString(num) {\n    if (Number.isNaN(num))\n        return null;\n    return num + '';\n}\nfunction shuffleArray(source) {\n    var array = source.concat();\n    var n = array.length;\n    while (n) {\n        var i = Math.floor(Math.random() * n--);\n        var t = array[n];\n        array[n] = array[i];\n        array[i] = t;\n    }\n    return array;\n}\nfunction sortArray(source, sortKey) {\n    return source.sort(function (a, b) {\n        if (typeof a[sortKey] === 'undefined') {\n            return 0;\n        }\n        if (typeof b[sortKey] === 'undefined') {\n            return 0;\n        }\n        var asc = parseInt(a[sortKey], 10);\n        var bsc = parseInt(b[sortKey], 10);\n        if (Number.isNaN(asc) || Number.isNaN(bsc)) {\n            return 0;\n        }\n        if (asc < bsc)\n            return 1;\n        if (asc > bsc)\n            return -1;\n        return 0;\n    });\n}\nfunction isType(obj, type) {\n    var t = Object.prototype.toString.call(obj).toLowerCase();\n    return t === \"[object \" + type.toLowerCase() + \"]\";\n}\nfunction toBoolean(str) {\n    return str.toLowerCase() === \"true\";\n}\nfunction initSerialNumArray(length) {\n    return Array(length).fill(0).map(function (v, i) { return i; });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9VdGlsLnRzPzJhODIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIG51bVRvU3RyaW5nKG51bSkge1xuICAgIGlmIChOdW1iZXIuaXNOYU4obnVtKSlcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIG51bSArICcnO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNodWZmbGVBcnJheShzb3VyY2UpIHtcbiAgICB2YXIgYXJyYXkgPSBzb3VyY2UuY29uY2F0KCk7XG4gICAgdmFyIG4gPSBhcnJheS5sZW5ndGg7XG4gICAgd2hpbGUgKG4pIHtcbiAgICAgICAgdmFyIGkgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBuLS0pO1xuICAgICAgICB2YXIgdCA9IGFycmF5W25dO1xuICAgICAgICBhcnJheVtuXSA9IGFycmF5W2ldO1xuICAgICAgICBhcnJheVtpXSA9IHQ7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzb3J0QXJyYXkoc291cmNlLCBzb3J0S2V5KSB7XG4gICAgcmV0dXJuIHNvdXJjZS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYVtzb3J0S2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgYltzb3J0S2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhc2MgPSBwYXJzZUludChhW3NvcnRLZXldLCAxMCk7XG4gICAgICAgIHZhciBic2MgPSBwYXJzZUludChiW3NvcnRLZXldLCAxMCk7XG4gICAgICAgIGlmIChOdW1iZXIuaXNOYU4oYXNjKSB8fCBOdW1iZXIuaXNOYU4oYnNjKSkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFzYyA8IGJzYylcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICBpZiAoYXNjID4gYnNjKVxuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1R5cGUob2JqLCB0eXBlKSB7XG4gICAgdmFyIHQgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKS50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiB0ID09PSBcIltvYmplY3QgXCIgKyB0eXBlLnRvTG93ZXJDYXNlKCkgKyBcIl1cIjtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0b0Jvb2xlYW4oc3RyKSB7XG4gICAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpID09PSBcInRydWVcIjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpbml0U2VyaWFsTnVtQXJyYXkobGVuZ3RoKSB7XG4gICAgcmV0dXJuIEFycmF5KGxlbmd0aCkuZmlsbCgwKS5tYXAoZnVuY3Rpb24gKHYsIGkpIHsgcmV0dXJuIGk7IH0pO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvVXRpbC50c1xuLy8gbW9kdWxlIGlkID0gMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/*!************************************!*\
  !*** multi ./src/iframe/iframe.ts ***!
  \************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./src/iframe/iframe.ts */2);


/***/ }),
/* 2 */
/*!******************************!*\
  !*** ./src/iframe/iframe.ts ***!
  \******************************/
/*! exports provided:  */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__initIframe__ = __webpack_require__(/*! ./initIframe */ 3);\n\n(function () {\n    var destinations = document.querySelectorAll('.js-qiita-widget');\n    if (destinations.length === 0) {\n        return;\n    }\n    Array.from(destinations, function (target) {\n        Object(__WEBPACK_IMPORTED_MODULE_0__initIframe__[\"a\" /* initIframe */])(target);\n    });\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9pZnJhbWUvaWZyYW1lLnRzPzE3MDMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW5pdElmcmFtZSB9IGZyb20gXCIuL2luaXRJZnJhbWVcIjtcbihmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRlc3RpbmF0aW9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qcy1xaWl0YS13aWRnZXQnKTtcbiAgICBpZiAoZGVzdGluYXRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIEFycmF5LmZyb20oZGVzdGluYXRpb25zLCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIGluaXRJZnJhbWUodGFyZ2V0KTtcbiAgICB9KTtcbn0pKCk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9pZnJhbWUvaWZyYW1lLnRzXG4vLyBtb2R1bGUgaWQgPSAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/*!**********************************!*\
  !*** ./src/iframe/initIframe.ts ***!
  \**********************************/
/*! exports provided: initIframe */
/*! exports used: initIframe */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = initIframe;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Util__ = __webpack_require__(/*! ../Util */ 0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__insertIframe__ = __webpack_require__(/*! ./insertIframe */ 4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__calcIframeHeight__ = __webpack_require__(/*! ./calcIframeHeight */ 11);\n\n\n\nfunction initIframe(target) {\n    target.style.display = 'none';\n    var iframe = Object(__WEBPACK_IMPORTED_MODULE_1__insertIframe__[\"a\" /* insertIframe */])(target);\n    iframe.scrolling = 'auto';\n    iframe.frameBorder = '0';\n    iframe.marginWidth = '0';\n    iframe.marginHeight = '0';\n    iframe.width = '100%';\n    iframe.classList.add('qiita-widget-iframe');\n    iframe.height = 'auto';\n    if (Object(__WEBPACK_IMPORTED_MODULE_0__Util__[\"a\" /* isType */])(target.dataset['height'], 'string')) {\n        iframe.height = target.dataset['height'];\n    }\n    if (iframe.height !== 'auto') {\n        return;\n    }\n    Object(__WEBPACK_IMPORTED_MODULE_2__calcIframeHeight__[\"a\" /* calcIframeHeight */])(iframe);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9pZnJhbWUvaW5pdElmcmFtZS50cz8wMmE1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzVHlwZSB9IGZyb20gXCIuLi9VdGlsXCI7XG5pbXBvcnQgeyBpbnNlcnRJZnJhbWUgfSBmcm9tIFwiLi9pbnNlcnRJZnJhbWVcIjtcbmltcG9ydCB7IGNhbGNJZnJhbWVIZWlnaHQgfSBmcm9tIFwiLi9jYWxjSWZyYW1lSGVpZ2h0XCI7XG5leHBvcnQgZnVuY3Rpb24gaW5pdElmcmFtZSh0YXJnZXQpIHtcbiAgICB0YXJnZXQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICB2YXIgaWZyYW1lID0gaW5zZXJ0SWZyYW1lKHRhcmdldCk7XG4gICAgaWZyYW1lLnNjcm9sbGluZyA9ICdhdXRvJztcbiAgICBpZnJhbWUuZnJhbWVCb3JkZXIgPSAnMCc7XG4gICAgaWZyYW1lLm1hcmdpbldpZHRoID0gJzAnO1xuICAgIGlmcmFtZS5tYXJnaW5IZWlnaHQgPSAnMCc7XG4gICAgaWZyYW1lLndpZHRoID0gJzEwMCUnO1xuICAgIGlmcmFtZS5jbGFzc0xpc3QuYWRkKCdxaWl0YS13aWRnZXQtaWZyYW1lJyk7XG4gICAgaWZyYW1lLmhlaWdodCA9ICdhdXRvJztcbiAgICBpZiAoaXNUeXBlKHRhcmdldC5kYXRhc2V0WydoZWlnaHQnXSwgJ3N0cmluZycpKSB7XG4gICAgICAgIGlmcmFtZS5oZWlnaHQgPSB0YXJnZXQuZGF0YXNldFsnaGVpZ2h0J107XG4gICAgfVxuICAgIGlmIChpZnJhbWUuaGVpZ2h0ICE9PSAnYXV0bycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjYWxjSWZyYW1lSGVpZ2h0KGlmcmFtZSk7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9pZnJhbWUvaW5pdElmcmFtZS50c1xuLy8gbW9kdWxlIGlkID0gM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/*!************************************!*\
  !*** ./src/iframe/insertIframe.ts ***!
  \************************************/
/*! exports provided: insertIframe */
/*! exports used: insertIframe */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = insertIframe;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__makeIframeContent__ = __webpack_require__(/*! ./makeIframeContent */ 5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__pickDataset__ = __webpack_require__(/*! ./pickDataset */ 10);\n\n\nfunction insertIframe(target) {\n    var iframe = document.createElement('iframe');\n    target.parentNode.insertBefore(iframe, target);\n    var doc = iframe.contentWindow.document;\n    var content = Object(__WEBPACK_IMPORTED_MODULE_0__makeIframeContent__[\"a\" /* makeIframeContent */])(Object(__WEBPACK_IMPORTED_MODULE_1__pickDataset__[\"a\" /* pickDataset */])(target));\n    doc.open();\n    doc.write(content);\n    doc.close();\n    return iframe;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9pZnJhbWUvaW5zZXJ0SWZyYW1lLnRzP2ZhZTciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWFrZUlmcmFtZUNvbnRlbnQgfSBmcm9tIFwiLi9tYWtlSWZyYW1lQ29udGVudFwiO1xuaW1wb3J0IHsgcGlja0RhdGFzZXQgfSBmcm9tIFwiLi9waWNrRGF0YXNldFwiO1xuZXhwb3J0IGZ1bmN0aW9uIGluc2VydElmcmFtZSh0YXJnZXQpIHtcbiAgICB2YXIgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgdGFyZ2V0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGlmcmFtZSwgdGFyZ2V0KTtcbiAgICB2YXIgZG9jID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gICAgdmFyIGNvbnRlbnQgPSBtYWtlSWZyYW1lQ29udGVudChwaWNrRGF0YXNldCh0YXJnZXQpKTtcbiAgICBkb2Mub3BlbigpO1xuICAgIGRvYy53cml0ZShjb250ZW50KTtcbiAgICBkb2MuY2xvc2UoKTtcbiAgICByZXR1cm4gaWZyYW1lO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvaWZyYW1lL2luc2VydElmcmFtZS50c1xuLy8gbW9kdWxlIGlkID0gNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/*!*****************************************!*\
  !*** ./src/iframe/makeIframeContent.ts ***!
  \*****************************************/
/*! exports provided: makeIframeContent */
/*! exports used: makeIframeContent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = makeIframeContent;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_css_iframe_scss__ = __webpack_require__(/*! css/iframe.scss */ 6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_css_iframe_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_css_iframe_scss__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__view_basic_html__ = __webpack_require__(/*! ../view/basic.html */ 8);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__view_basic_html___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__view_basic_html__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__dist_lib_js__ = __webpack_require__(/*! ../../dist/lib.js */ 9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__dist_lib_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__dist_lib_js__);\n\n\n\nfunction makeIframeContent(data) {\n    return \"\\n<style>\" + __WEBPACK_IMPORTED_MODULE_0_css_iframe_scss__ + \"</style>\\n\" + __WEBPACK_IMPORTED_MODULE_1__view_basic_html__ + \"\\n<script>\" + __WEBPACK_IMPORTED_MODULE_2__dist_lib_js__ + \"</script>\\n\\n<script>\\n  (function() {\\n    new QiitaWidget(\" + JSON.stringify(data) + \").init();\\n  })();\\n</script>\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9pZnJhbWUvbWFrZUlmcmFtZUNvbnRlbnQudHM/MTE4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBDU1MgZnJvbSBcImNzcy9pZnJhbWUuc2Nzc1wiO1xuaW1wb3J0ICogYXMgSFRNTCBmcm9tIFwiLi4vdmlldy9iYXNpYy5odG1sXCI7XG5pbXBvcnQgKiBhcyBMSUIgZnJvbSBcIi4uLy4uL2Rpc3QvbGliLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gbWFrZUlmcmFtZUNvbnRlbnQoZGF0YSkge1xuICAgIHJldHVybiBcIlxcbjxzdHlsZT5cIiArIENTUyArIFwiPC9zdHlsZT5cXG5cIiArIEhUTUwgKyBcIlxcbjxzY3JpcHQ+XCIgKyBMSUIgKyBcIjwvc2NyaXB0PlxcblxcbjxzY3JpcHQ+XFxuICAoZnVuY3Rpb24oKSB7XFxuICAgIG5ldyBRaWl0YVdpZGdldChcIiArIEpTT04uc3RyaW5naWZ5KGRhdGEpICsgXCIpLmluaXQoKTtcXG4gIH0pKCk7XFxuPC9zY3JpcHQ+XCI7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9pZnJhbWUvbWFrZUlmcmFtZUNvbnRlbnQudHNcbi8vIG1vZHVsZSBpZCA9IDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/*!*****************************!*\
  !*** ./src/css/iframe.scss ***!
  \*****************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/lib/css-base.js */ 7)(false);\n// imports\n\n\n// module\nexports.push([module.i, \"/*! sanitize.css | CC0 Public Domain | github.com/jonathantneal/sanitize.css */:root{-ms-overflow-style:-ms-autohiding-scrollbar;overflow-y:scroll;-webkit-text-size-adjust:100%;-moz-text-size-adjust:100%;-ms-text-size-adjust:100%;text-size-adjust:100%}audio:not([controls]){display:none}details{display:block}input[type=number]{width:auto}input[type=search]{-webkit-appearance:textfield}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}main,summary{display:block}pre{overflow:auto}progress{display:inline-block}small{font-size:75%}template{display:none}textarea{overflow:auto}[hidden]{display:none}[unselectable]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}*,:after,:before{-webkit-box-sizing:inherit;box-sizing:inherit}*{font-size:inherit;line-height:inherit}:after,:before{text-decoration:inherit;vertical-align:inherit}*,:after,:before{border-style:solid;border-width:0}*{margin:0;padding:0}:root{-webkit-box-sizing:border-box;box-sizing:border-box;cursor:default;font:16px/1.5 sans-serif;text-rendering:optimizeLegibility}html{background-color:#fff}a{text-decoration:none}audio,canvas,iframe,img,svg,video{vertical-align:middle}button,input,select,textarea{background-color:transparent;color:inherit;font-family:inherit;font-style:inherit;font-weight:inherit}[type=button],[type=date],[type=datetime-local],[type=datetime],[type=email],[type=month],[type=number],[type=password],[type=reset],[type=search],[type=submit],[type=tel],[type=text],[type=time],[type=url],[type=week],button,select,textarea{min-height:1.5em}code,kbd,pre,samp{font-family:monospace,monospace}nav ol,nav ul{list-style:none}select{-moz-appearance:none;-webkit-appearance:none}select::-ms-expand{display:none}select::-ms-value{color:currentColor}table{border-collapse:collapse;border-spacing:0}textarea{resize:vertical}::-moz-selection{background-color:#b3d4fc;text-shadow:none}::selection{background-color:#b3d4fc;text-shadow:none}@media screen{[hidden~=screen]{display:inherit}[hidden~=screen]:not(:active):not(:focus):not(:target){clip:rect(0 0 0 0)!important;position:absolute!important}}body{font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Helvetica Neue,Hiragino Kaku Gothic ProN,\\\\\\\\30E1\\\\30A4\\\\30EA\\\\30AA,meiryo,sans-serif;line-height:1.1}a:link,a:visited{color:#337ab7}a:hover{text-decoration:underline}img{width:100%;height:auto}.qiita-widget__articles-head{font-size:.875rem;font-weight:700;margin-bottom:10px}.qiita-widget__articles{margin-top:15px}.qiita-user{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-flow:row nowrap;flex-flow:row nowrap}.qiita-user__image{width:60px;height:60px;margin-right:5px}.qiita-user__id{font-size:1rem;margin-bottom:3px}.qiita-user__followers-num,.qiita-user__items-num,.qiita-user__likes-num{font-weight:700;font-size:.875rem}.qiita-user__followers-unit,.qiita-user__items-unit,.qiita-user__likes-unit{font-size:.75rem}.qiita-article-list{padding-left:10px;list-style:none}.qiita-article__title{font-size:.8125rem;line-height:1.42857;margin-bottom:5px;font-weight:400}.qiita-article__title:before{display:inline-block;content:\\\"\\\\2022\\\";color:#999;margin-left:-10px;margin-right:5px}\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jc3MvaWZyYW1lLnNjc3M/NDg5MiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi8qISBzYW5pdGl6ZS5jc3MgfCBDQzAgUHVibGljIERvbWFpbiB8IGdpdGh1Yi5jb20vam9uYXRoYW50bmVhbC9zYW5pdGl6ZS5jc3MgKi86cm9vdHstbXMtb3ZlcmZsb3ctc3R5bGU6LW1zLWF1dG9oaWRpbmctc2Nyb2xsYmFyO292ZXJmbG93LXk6c2Nyb2xsOy13ZWJraXQtdGV4dC1zaXplLWFkanVzdDoxMDAlOy1tb3otdGV4dC1zaXplLWFkanVzdDoxMDAlOy1tcy10ZXh0LXNpemUtYWRqdXN0OjEwMCU7dGV4dC1zaXplLWFkanVzdDoxMDAlfWF1ZGlvOm5vdChbY29udHJvbHNdKXtkaXNwbGF5Om5vbmV9ZGV0YWlsc3tkaXNwbGF5OmJsb2NrfWlucHV0W3R5cGU9bnVtYmVyXXt3aWR0aDphdXRvfWlucHV0W3R5cGU9c2VhcmNoXXstd2Via2l0LWFwcGVhcmFuY2U6dGV4dGZpZWxkfWlucHV0W3R5cGU9c2VhcmNoXTo6LXdlYmtpdC1zZWFyY2gtY2FuY2VsLWJ1dHRvbixpbnB1dFt0eXBlPXNlYXJjaF06Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb257LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmV9bWFpbixzdW1tYXJ5e2Rpc3BsYXk6YmxvY2t9cHJle292ZXJmbG93OmF1dG99cHJvZ3Jlc3N7ZGlzcGxheTppbmxpbmUtYmxvY2t9c21hbGx7Zm9udC1zaXplOjc1JX10ZW1wbGF0ZXtkaXNwbGF5Om5vbmV9dGV4dGFyZWF7b3ZlcmZsb3c6YXV0b31baGlkZGVuXXtkaXNwbGF5Om5vbmV9W3Vuc2VsZWN0YWJsZV17LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lfSosOmFmdGVyLDpiZWZvcmV7LXdlYmtpdC1ib3gtc2l6aW5nOmluaGVyaXQ7Ym94LXNpemluZzppbmhlcml0fSp7Zm9udC1zaXplOmluaGVyaXQ7bGluZS1oZWlnaHQ6aW5oZXJpdH06YWZ0ZXIsOmJlZm9yZXt0ZXh0LWRlY29yYXRpb246aW5oZXJpdDt2ZXJ0aWNhbC1hbGlnbjppbmhlcml0fSosOmFmdGVyLDpiZWZvcmV7Ym9yZGVyLXN0eWxlOnNvbGlkO2JvcmRlci13aWR0aDowfSp7bWFyZ2luOjA7cGFkZGluZzowfTpyb290ey13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDtjdXJzb3I6ZGVmYXVsdDtmb250OjE2cHgvMS41IHNhbnMtc2VyaWY7dGV4dC1yZW5kZXJpbmc6b3B0aW1pemVMZWdpYmlsaXR5fWh0bWx7YmFja2dyb3VuZC1jb2xvcjojZmZmfWF7dGV4dC1kZWNvcmF0aW9uOm5vbmV9YXVkaW8sY2FudmFzLGlmcmFtZSxpbWcsc3ZnLHZpZGVve3ZlcnRpY2FsLWFsaWduOm1pZGRsZX1idXR0b24saW5wdXQsc2VsZWN0LHRleHRhcmVhe2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7Y29sb3I6aW5oZXJpdDtmb250LWZhbWlseTppbmhlcml0O2ZvbnQtc3R5bGU6aW5oZXJpdDtmb250LXdlaWdodDppbmhlcml0fVt0eXBlPWJ1dHRvbl0sW3R5cGU9ZGF0ZV0sW3R5cGU9ZGF0ZXRpbWUtbG9jYWxdLFt0eXBlPWRhdGV0aW1lXSxbdHlwZT1lbWFpbF0sW3R5cGU9bW9udGhdLFt0eXBlPW51bWJlcl0sW3R5cGU9cGFzc3dvcmRdLFt0eXBlPXJlc2V0XSxbdHlwZT1zZWFyY2hdLFt0eXBlPXN1Ym1pdF0sW3R5cGU9dGVsXSxbdHlwZT10ZXh0XSxbdHlwZT10aW1lXSxbdHlwZT11cmxdLFt0eXBlPXdlZWtdLGJ1dHRvbixzZWxlY3QsdGV4dGFyZWF7bWluLWhlaWdodDoxLjVlbX1jb2RlLGtiZCxwcmUsc2FtcHtmb250LWZhbWlseTptb25vc3BhY2UsbW9ub3NwYWNlfW5hdiBvbCxuYXYgdWx7bGlzdC1zdHlsZTpub25lfXNlbGVjdHstbW96LWFwcGVhcmFuY2U6bm9uZTstd2Via2l0LWFwcGVhcmFuY2U6bm9uZX1zZWxlY3Q6Oi1tcy1leHBhbmR7ZGlzcGxheTpub25lfXNlbGVjdDo6LW1zLXZhbHVle2NvbG9yOmN1cnJlbnRDb2xvcn10YWJsZXtib3JkZXItY29sbGFwc2U6Y29sbGFwc2U7Ym9yZGVyLXNwYWNpbmc6MH10ZXh0YXJlYXtyZXNpemU6dmVydGljYWx9OjotbW96LXNlbGVjdGlvbntiYWNrZ3JvdW5kLWNvbG9yOiNiM2Q0ZmM7dGV4dC1zaGFkb3c6bm9uZX06OnNlbGVjdGlvbntiYWNrZ3JvdW5kLWNvbG9yOiNiM2Q0ZmM7dGV4dC1zaGFkb3c6bm9uZX1AbWVkaWEgc2NyZWVue1toaWRkZW5+PXNjcmVlbl17ZGlzcGxheTppbmhlcml0fVtoaWRkZW5+PXNjcmVlbl06bm90KDphY3RpdmUpOm5vdCg6Zm9jdXMpOm5vdCg6dGFyZ2V0KXtjbGlwOnJlY3QoMCAwIDAgMCkhaW1wb3J0YW50O3Bvc2l0aW9uOmFic29sdXRlIWltcG9ydGFudH19Ym9keXtmb250LWZhbWlseTotYXBwbGUtc3lzdGVtLEJsaW5rTWFjU3lzdGVtRm9udCxTZWdvZSBVSSxIZWx2ZXRpY2EgTmV1ZSxIaXJhZ2lubyBLYWt1IEdvdGhpYyBQcm9OLFxcXFxcXFxcMzBFMVxcXFwzMEE0XFxcXDMwRUFcXFxcMzBBQSxtZWlyeW8sc2Fucy1zZXJpZjtsaW5lLWhlaWdodDoxLjF9YTpsaW5rLGE6dmlzaXRlZHtjb2xvcjojMzM3YWI3fWE6aG92ZXJ7dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZX1pbWd7d2lkdGg6MTAwJTtoZWlnaHQ6YXV0b30ucWlpdGEtd2lkZ2V0X19hcnRpY2xlcy1oZWFke2ZvbnQtc2l6ZTouODc1cmVtO2ZvbnQtd2VpZ2h0OjcwMDttYXJnaW4tYm90dG9tOjEwcHh9LnFpaXRhLXdpZGdldF9fYXJ0aWNsZXN7bWFyZ2luLXRvcDoxNXB4fS5xaWl0YS11c2Vye2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LXdlYmtpdC1ib3gtb3JpZW50Omhvcml6b250YWw7LXdlYmtpdC1ib3gtZGlyZWN0aW9uOm5vcm1hbDstbXMtZmxleC1mbG93OnJvdyBub3dyYXA7ZmxleC1mbG93OnJvdyBub3dyYXB9LnFpaXRhLXVzZXJfX2ltYWdle3dpZHRoOjYwcHg7aGVpZ2h0OjYwcHg7bWFyZ2luLXJpZ2h0OjVweH0ucWlpdGEtdXNlcl9faWR7Zm9udC1zaXplOjFyZW07bWFyZ2luLWJvdHRvbTozcHh9LnFpaXRhLXVzZXJfX2ZvbGxvd2Vycy1udW0sLnFpaXRhLXVzZXJfX2l0ZW1zLW51bSwucWlpdGEtdXNlcl9fbGlrZXMtbnVte2ZvbnQtd2VpZ2h0OjcwMDtmb250LXNpemU6Ljg3NXJlbX0ucWlpdGEtdXNlcl9fZm9sbG93ZXJzLXVuaXQsLnFpaXRhLXVzZXJfX2l0ZW1zLXVuaXQsLnFpaXRhLXVzZXJfX2xpa2VzLXVuaXR7Zm9udC1zaXplOi43NXJlbX0ucWlpdGEtYXJ0aWNsZS1saXN0e3BhZGRpbmctbGVmdDoxMHB4O2xpc3Qtc3R5bGU6bm9uZX0ucWlpdGEtYXJ0aWNsZV9fdGl0bGV7Zm9udC1zaXplOi44MTI1cmVtO2xpbmUtaGVpZ2h0OjEuNDI4NTc7bWFyZ2luLWJvdHRvbTo1cHg7Zm9udC13ZWlnaHQ6NDAwfS5xaWl0YS1hcnRpY2xlX190aXRsZTpiZWZvcmV7ZGlzcGxheTppbmxpbmUtYmxvY2s7Y29udGVudDpcXFwiXFxcXDIwMjJcXFwiO2NvbG9yOiM5OTk7bWFyZ2luLWxlZnQ6LTEwcHg7bWFyZ2luLXJpZ2h0OjVweH1cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jc3MvaWZyYW1lLnNjc3Ncbi8vIG1vZHVsZSBpZCA9IDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/*!*************************************************!*\
  !*** ./node_modules/css-loader/lib/css-base.js ***!
  \*************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

eval("/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qcz8xNTlmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih1c2VTb3VyY2VNYXApIHtcblx0dmFyIGxpc3QgPSBbXTtcblxuXHQvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cdGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcblx0XHRcdHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXHRcdFx0aWYoaXRlbVsyXSkge1xuXHRcdFx0XHRyZXR1cm4gXCJAbWVkaWEgXCIgKyBpdGVtWzJdICsgXCJ7XCIgKyBjb250ZW50ICsgXCJ9XCI7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gY29udGVudDtcblx0XHRcdH1cblx0XHR9KS5qb2luKFwiXCIpO1xuXHR9O1xuXG5cdC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cdGxpc3QuaSA9IGZ1bmN0aW9uKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcblx0XHRpZih0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIilcblx0XHRcdG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcblx0XHR2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXHRcdFx0aWYodHlwZW9mIGlkID09PSBcIm51bWJlclwiKVxuXHRcdFx0XHRhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG5cdFx0fVxuXHRcdGZvcihpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gbW9kdWxlc1tpXTtcblx0XHRcdC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcblx0XHRcdC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXG5cdFx0XHQvLyAgd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxuXHRcdFx0Ly8gIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcblx0XHRcdGlmKHR5cGVvZiBpdGVtWzBdICE9PSBcIm51bWJlclwiIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG5cdFx0XHRcdGlmKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gbWVkaWFRdWVyeTtcblx0XHRcdFx0fSBlbHNlIGlmKG1lZGlhUXVlcnkpIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gXCIoXCIgKyBpdGVtWzJdICsgXCIpIGFuZCAoXCIgKyBtZWRpYVF1ZXJ5ICsgXCIpXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0bGlzdC5wdXNoKGl0ZW0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0cmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7XG5cdHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblx0aWYgKCFjc3NNYXBwaW5nKSB7XG5cdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdH1cblxuXHRpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0dmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG5cdFx0dmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcblx0XHRcdHJldHVybiAnLyojIHNvdXJjZVVSTD0nICsgY3NzTWFwcGluZy5zb3VyY2VSb290ICsgc291cmNlICsgJyAqLydcblx0XHR9KTtcblxuXHRcdHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuXHR9XG5cblx0cmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn1cblxuLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcblx0dmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG5cdHZhciBkYXRhID0gJ3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LCcgKyBiYXNlNjQ7XG5cblx0cmV0dXJuICcvKiMgJyArIGRhdGEgKyAnICovJztcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXG4vLyBtb2R1bGUgaWQgPSA3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/*!*****************************!*\
  !*** ./src/view/basic.html ***!
  \*****************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

eval("module.exports = \"<section class=\\\"qiita-widget\\\">\\n  <header class=\\\"qiita-widget__header qiita-user\\\" id=\\\"qiita-user\\\"></header>\\n  <section class=\\\"qiita-widget__articles\\\">\\n    <h2 class=\\\"qiita-widget__articles-head\\\">人気の投稿</h2>\\n    <ul id=\\\"qiita-article\\\" class=\\\"qiita-article-list\\\"></ul>\\n  </section>\\n</section>\\n\\n<template id=\\\"qiita-user-tpl\\\">\\n  <p class=\\\"qiita-user__image\\\"><img class=\\\"qiita-user__img js-profile-image-url\\\" src=\\\"\\\" alt=\\\"\\\" /></p>\\n\\n  <div class=\\\"qiita-user__title\\\">\\n    <a class=\\\"qiita-user__url js-url\\\" target=\\\"_blank\\\"><h1 class=\\\"qiita-user__id js-id\\\"></h1></a>\\n\\n    <p class=\\\"qiita-user__items\\\">\\n      <span class=\\\"qiita-user__items-num js-items-count\\\"></span>\\n      <span class=\\\"qiita-user__items-unit\\\">Items</span>\\n    </p>\\n\\n    <p class=\\\"qiita-user__likes\\\">\\n      <span class=\\\"qiita-user__likes-num js-likes-count\\\"></span>\\n      <span class=\\\"qiita-user__likes-unit\\\">Contribution</span>\\n    </p>\\n\\n  </div>\\n</template>\\n\\n<template id=\\\"qiita-article-tpl\\\">\\n  <li class=\\\"qiita-article-list__item\\\">\\n    <a class=\\\"qiita-article js-url\\\" target=\\\"_blank\\\">\\n      <h3 class=\\\"qiita-article__title js-title\\\"></h3>\\n    </a>\\n  </li>\\n</template>\\n\\n<script src=\\\"https://unpkg.com/axios/dist/axios.min.js\\\"></script>\\n<script src=\\\"https://unpkg.com/axios-cache-adapter/dist/cache.bundled.min.js\\\"></script>\\n\"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy92aWV3L2Jhc2ljLmh0bWw/OTVkYSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPHNlY3Rpb24gY2xhc3M9XFxcInFpaXRhLXdpZGdldFxcXCI+XFxuICA8aGVhZGVyIGNsYXNzPVxcXCJxaWl0YS13aWRnZXRfX2hlYWRlciBxaWl0YS11c2VyXFxcIiBpZD1cXFwicWlpdGEtdXNlclxcXCI+PC9oZWFkZXI+XFxuICA8c2VjdGlvbiBjbGFzcz1cXFwicWlpdGEtd2lkZ2V0X19hcnRpY2xlc1xcXCI+XFxuICAgIDxoMiBjbGFzcz1cXFwicWlpdGEtd2lkZ2V0X19hcnRpY2xlcy1oZWFkXFxcIj7kurrmsJfjga7mipXnqL88L2gyPlxcbiAgICA8dWwgaWQ9XFxcInFpaXRhLWFydGljbGVcXFwiIGNsYXNzPVxcXCJxaWl0YS1hcnRpY2xlLWxpc3RcXFwiPjwvdWw+XFxuICA8L3NlY3Rpb24+XFxuPC9zZWN0aW9uPlxcblxcbjx0ZW1wbGF0ZSBpZD1cXFwicWlpdGEtdXNlci10cGxcXFwiPlxcbiAgPHAgY2xhc3M9XFxcInFpaXRhLXVzZXJfX2ltYWdlXFxcIj48aW1nIGNsYXNzPVxcXCJxaWl0YS11c2VyX19pbWcganMtcHJvZmlsZS1pbWFnZS11cmxcXFwiIHNyYz1cXFwiXFxcIiBhbHQ9XFxcIlxcXCIgLz48L3A+XFxuXFxuICA8ZGl2IGNsYXNzPVxcXCJxaWl0YS11c2VyX190aXRsZVxcXCI+XFxuICAgIDxhIGNsYXNzPVxcXCJxaWl0YS11c2VyX191cmwganMtdXJsXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+PGgxIGNsYXNzPVxcXCJxaWl0YS11c2VyX19pZCBqcy1pZFxcXCI+PC9oMT48L2E+XFxuXFxuICAgIDxwIGNsYXNzPVxcXCJxaWl0YS11c2VyX19pdGVtc1xcXCI+XFxuICAgICAgPHNwYW4gY2xhc3M9XFxcInFpaXRhLXVzZXJfX2l0ZW1zLW51bSBqcy1pdGVtcy1jb3VudFxcXCI+PC9zcGFuPlxcbiAgICAgIDxzcGFuIGNsYXNzPVxcXCJxaWl0YS11c2VyX19pdGVtcy11bml0XFxcIj5JdGVtczwvc3Bhbj5cXG4gICAgPC9wPlxcblxcbiAgICA8cCBjbGFzcz1cXFwicWlpdGEtdXNlcl9fbGlrZXNcXFwiPlxcbiAgICAgIDxzcGFuIGNsYXNzPVxcXCJxaWl0YS11c2VyX19saWtlcy1udW0ganMtbGlrZXMtY291bnRcXFwiPjwvc3Bhbj5cXG4gICAgICA8c3BhbiBjbGFzcz1cXFwicWlpdGEtdXNlcl9fbGlrZXMtdW5pdFxcXCI+Q29udHJpYnV0aW9uPC9zcGFuPlxcbiAgICA8L3A+XFxuXFxuICA8L2Rpdj5cXG48L3RlbXBsYXRlPlxcblxcbjx0ZW1wbGF0ZSBpZD1cXFwicWlpdGEtYXJ0aWNsZS10cGxcXFwiPlxcbiAgPGxpIGNsYXNzPVxcXCJxaWl0YS1hcnRpY2xlLWxpc3RfX2l0ZW1cXFwiPlxcbiAgICA8YSBjbGFzcz1cXFwicWlpdGEtYXJ0aWNsZSBqcy11cmxcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5cXG4gICAgICA8aDMgY2xhc3M9XFxcInFpaXRhLWFydGljbGVfX3RpdGxlIGpzLXRpdGxlXFxcIj48L2gzPlxcbiAgICA8L2E+XFxuICA8L2xpPlxcbjwvdGVtcGxhdGU+XFxuXFxuPHNjcmlwdCBzcmM9XFxcImh0dHBzOi8vdW5wa2cuY29tL2F4aW9zL2Rpc3QvYXhpb3MubWluLmpzXFxcIj48L3NjcmlwdD5cXG48c2NyaXB0IHNyYz1cXFwiaHR0cHM6Ly91bnBrZy5jb20vYXhpb3MtY2FjaGUtYWRhcHRlci9kaXN0L2NhY2hlLmJ1bmRsZWQubWluLmpzXFxcIj48L3NjcmlwdD5cXG5cIlxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3ZpZXcvYmFzaWMuaHRtbFxuLy8gbW9kdWxlIGlkID0gOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/*!*********************!*\
  !*** ./dist/lib.js ***!
  \*********************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

eval("module.exports = \"(function webpackUniversalModuleDefinition(root, factory) {\\n\\tif(typeof exports === 'object' && typeof module === 'object')\\n\\t\\tmodule.exports = factory();\\n\\telse if(typeof define === 'function' && define.amd)\\n\\t\\tdefine(\\\"QiitaWidget\\\", [], factory);\\n\\telse if(typeof exports === 'object')\\n\\t\\texports[\\\"QiitaWidget\\\"] = factory();\\n\\telse\\n\\t\\troot[\\\"QiitaWidget\\\"] = factory();\\n})(this, function() {\\nreturn /******/ (function(modules) { // webpackBootstrap\\n/******/ \\t// The module cache\\n/******/ \\tvar installedModules = {};\\n/******/\\n/******/ \\t// The require function\\n/******/ \\tfunction __webpack_require__(moduleId) {\\n/******/\\n/******/ \\t\\t// Check if module is in cache\\n/******/ \\t\\tif(installedModules[moduleId]) {\\n/******/ \\t\\t\\treturn installedModules[moduleId].exports;\\n/******/ \\t\\t}\\n/******/ \\t\\t// Create a new module (and put it into the cache)\\n/******/ \\t\\tvar module = installedModules[moduleId] = {\\n/******/ \\t\\t\\ti: moduleId,\\n/******/ \\t\\t\\tl: false,\\n/******/ \\t\\t\\texports: {}\\n/******/ \\t\\t};\\n/******/\\n/******/ \\t\\t// Execute the module function\\n/******/ \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n/******/\\n/******/ \\t\\t// Flag the module as loaded\\n/******/ \\t\\tmodule.l = true;\\n/******/\\n/******/ \\t\\t// Return the exports of the module\\n/******/ \\t\\treturn module.exports;\\n/******/ \\t}\\n/******/\\n/******/\\n/******/ \\t// expose the modules object (__webpack_modules__)\\n/******/ \\t__webpack_require__.m = modules;\\n/******/\\n/******/ \\t// expose the module cache\\n/******/ \\t__webpack_require__.c = installedModules;\\n/******/\\n/******/ \\t// define getter function for harmony exports\\n/******/ \\t__webpack_require__.d = function(exports, name, getter) {\\n/******/ \\t\\tif(!__webpack_require__.o(exports, name)) {\\n/******/ \\t\\t\\tObject.defineProperty(exports, name, {\\n/******/ \\t\\t\\t\\tconfigurable: false,\\n/******/ \\t\\t\\t\\tenumerable: true,\\n/******/ \\t\\t\\t\\tget: getter\\n/******/ \\t\\t\\t});\\n/******/ \\t\\t}\\n/******/ \\t};\\n/******/\\n/******/ \\t// getDefaultExport function for compatibility with non-harmony modules\\n/******/ \\t__webpack_require__.n = function(module) {\\n/******/ \\t\\tvar getter = module && module.__esModule ?\\n/******/ \\t\\t\\tfunction getDefault() { return module['default']; } :\\n/******/ \\t\\t\\tfunction getModuleExports() { return module; };\\n/******/ \\t\\t__webpack_require__.d(getter, 'a', getter);\\n/******/ \\t\\treturn getter;\\n/******/ \\t};\\n/******/\\n/******/ \\t// Object.prototype.hasOwnProperty.call\\n/******/ \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n/******/\\n/******/ \\t// __webpack_public_path__\\n/******/ \\t__webpack_require__.p = \\\"\\\";\\n/******/\\n/******/ \\t// Load entry module and return exports\\n/******/ \\treturn __webpack_require__(__webpack_require__.s = 1);\\n/******/ })\\n/************************************************************************/\\n/******/ ([\\n/* 0 */\\n/*!*********************!*\\\\\\n  !*** ./src/Util.ts ***!\\n  \\\\*********************/\\n/*! exports provided: numToString, shuffleArray, sortArray, isType, toBoolean, initSerialNumArray */\\n/*! exports used: initSerialNumArray, numToString, shuffleArray, sortArray */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\neval(\\\"/* harmony export (immutable) */ __webpack_exports__[\\\\\\\"b\\\\\\\"] = numToString;\\\\n/* harmony export (immutable) */ __webpack_exports__[\\\\\\\"c\\\\\\\"] = shuffleArray;\\\\n/* harmony export (immutable) */ __webpack_exports__[\\\\\\\"d\\\\\\\"] = sortArray;\\\\n/* unused harmony export isType */\\\\n/* unused harmony export toBoolean */\\\\n/* harmony export (immutable) */ __webpack_exports__[\\\\\\\"a\\\\\\\"] = initSerialNumArray;\\\\nfunction numToString(num) {\\\\n    if (Number.isNaN(num))\\\\n        return null;\\\\n    return num + '';\\\\n}\\\\nfunction shuffleArray(source) {\\\\n    var array = source.concat();\\\\n    var n = array.length;\\\\n    while (n) {\\\\n        var i = Math.floor(Math.random() * n--);\\\\n        var t = array[n];\\\\n        array[n] = array[i];\\\\n        array[i] = t;\\\\n    }\\\\n    return array;\\\\n}\\\\nfunction sortArray(source, sortKey) {\\\\n    return source.sort(function (a, b) {\\\\n        if (typeof a[sortKey] === 'undefined') {\\\\n            return 0;\\\\n        }\\\\n        if (typeof b[sortKey] === 'undefined') {\\\\n            return 0;\\\\n        }\\\\n        var asc = parseInt(a[sortKey], 10);\\\\n        var bsc = parseInt(b[sortKey], 10);\\\\n        if (Number.isNaN(asc) || Number.isNaN(bsc)) {\\\\n            return 0;\\\\n        }\\\\n        if (asc < bsc)\\\\n            return 1;\\\\n        if (asc > bsc)\\\\n            return -1;\\\\n        return 0;\\\\n    });\\\\n}\\\\nfunction isType(obj, type) {\\\\n    var t = Object.prototype.toString.call(obj).toLowerCase();\\\\n    return t === \\\\\\\"[object \\\\\\\" + type.toLowerCase() + \\\\\\\"]\\\\\\\";\\\\n}\\\\nfunction toBoolean(str) {\\\\n    return str.toLowerCase() === \\\\\\\"true\\\\\\\";\\\\n}\\\\nfunction initSerialNumArray(length) {\\\\n    return Array(length).fill(0).map(function (v, i) { return i; });\\\\n}\\\\n//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9VdGlsLnRzPzJhODIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIG51bVRvU3RyaW5nKG51bSkge1xuICAgIGlmIChOdW1iZXIuaXNOYU4obnVtKSlcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIG51bSArICcnO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNodWZmbGVBcnJheShzb3VyY2UpIHtcbiAgICB2YXIgYXJyYXkgPSBzb3VyY2UuY29uY2F0KCk7XG4gICAgdmFyIG4gPSBhcnJheS5sZW5ndGg7XG4gICAgd2hpbGUgKG4pIHtcbiAgICAgICAgdmFyIGkgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBuLS0pO1xuICAgICAgICB2YXIgdCA9IGFycmF5W25dO1xuICAgICAgICBhcnJheVtuXSA9IGFycmF5W2ldO1xuICAgICAgICBhcnJheVtpXSA9IHQ7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzb3J0QXJyYXkoc291cmNlLCBzb3J0S2V5KSB7XG4gICAgcmV0dXJuIHNvdXJjZS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYVtzb3J0S2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgYltzb3J0S2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhc2MgPSBwYXJzZUludChhW3NvcnRLZXldLCAxMCk7XG4gICAgICAgIHZhciBic2MgPSBwYXJzZUludChiW3NvcnRLZXldLCAxMCk7XG4gICAgICAgIGlmIChOdW1iZXIuaXNOYU4oYXNjKSB8fCBOdW1iZXIuaXNOYU4oYnNjKSkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFzYyA8IGJzYylcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICBpZiAoYXNjID4gYnNjKVxuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1R5cGUob2JqLCB0eXBlKSB7XG4gICAgdmFyIHQgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKS50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiB0ID09PSBcIltvYmplY3QgXCIgKyB0eXBlLnRvTG93ZXJDYXNlKCkgKyBcIl1cIjtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0b0Jvb2xlYW4oc3RyKSB7XG4gICAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpID09PSBcInRydWVcIjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpbml0U2VyaWFsTnVtQXJyYXkobGVuZ3RoKSB7XG4gICAgcmV0dXJuIEFycmF5KGxlbmd0aCkuZmlsbCgwKS5tYXAoZnVuY3Rpb24gKHYsIGkpIHsgcmV0dXJuIGk7IH0pO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvVXRpbC50c1xuLy8gbW9kdWxlIGlkID0gMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\\\\n//# sourceURL=webpack-internal:///0\\\\n\\\");\\n\\n/***/ }),\\n/* 1 */\\n/*!**************************************!*\\\\\\n  !*** multi ./src/lib/QiitaWidget.ts ***!\\n  \\\\**************************************/\\n/*! no static exports found */\\n/*! all exports used */\\n/***/ (function(module, exports, __webpack_require__) {\\n\\nmodule.exports = __webpack_require__(/*! ./src/lib/QiitaWidget.ts */2);\\n\\n\\n/***/ }),\\n/* 2 */\\n/*!********************************!*\\\\\\n  !*** ./src/lib/QiitaWidget.ts ***!\\n  \\\\********************************/\\n/*! exports provided: default */\\n/*! all exports used */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\neval(\\\"Object.defineProperty(__webpack_exports__, \\\\\\\"__esModule\\\\\\\", { value: true });\\\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__QiitaItems__ = __webpack_require__(/*! ./QiitaItems */ 3);\\\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__QiitaPresenter__ = __webpack_require__(/*! ./QiitaPresenter */ 6);\\\\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\\\\n    return new (P || (P = Promise))(function (resolve, reject) {\\\\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\\\\n        function rejected(value) { try { step(generator[\\\\\\\"throw\\\\\\\"](value)); } catch (e) { reject(e); } }\\\\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\\\\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\\\\n    });\\\\n};\\\\nvar __generator = (this && this.__generator) || function (thisArg, body) {\\\\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\\\\n    return g = { next: verb(0), \\\\\\\"throw\\\\\\\": verb(1), \\\\\\\"return\\\\\\\": verb(2) }, typeof Symbol === \\\\\\\"function\\\\\\\" && (g[Symbol.iterator] = function() { return this; }), g;\\\\n    function verb(n) { return function (v) { return step([n, v]); }; }\\\\n    function step(op) {\\\\n        if (f) throw new TypeError(\\\\\\\"Generator is already executing.\\\\\\\");\\\\n        while (_) try {\\\\n            if (f = 1, y && (t = y[op[0] & 2 ? \\\\\\\"return\\\\\\\" : op[0] ? \\\\\\\"throw\\\\\\\" : \\\\\\\"next\\\\\\\"]) && !(t = t.call(y, op[1])).done) return t;\\\\n            if (y = 0, t) op = [0, t.value];\\\\n            switch (op[0]) {\\\\n                case 0: case 1: t = op; break;\\\\n                case 4: _.label++; return { value: op[1], done: false };\\\\n                case 5: _.label++; y = op[1]; op = [0]; continue;\\\\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\\\\n                default:\\\\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\\\\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\\\\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\\\\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\\\\n                    if (t[2]) _.ops.pop();\\\\n                    _.trys.pop(); continue;\\\\n            }\\\\n            op = body.call(thisArg, _);\\\\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\\\\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\\\\n    }\\\\n};\\\\n\\\\n\\\\nvar QiitaWidget = (function () {\\\\n    function QiitaWidget(conf) {\\\\n        this.conf = Object.assign({}, QiitaWidget.defaultConf, conf);\\\\n        this.items = new __WEBPACK_IMPORTED_MODULE_0__QiitaItems__[\\\\\\\"a\\\\\\\" /* QiitaItems */](this.conf);\\\\n        this.presenter = new __WEBPACK_IMPORTED_MODULE_1__QiitaPresenter__[\\\\\\\"a\\\\\\\" /* QiitaPresenter */](this.items, this.conf);\\\\n    }\\\\n    QiitaWidget.prototype.init = function () {\\\\n        return __awaiter(this, void 0, void 0, function () {\\\\n            return __generator(this, function (_a) {\\\\n                switch (_a.label) {\\\\n                    case 0: return [4, this.items.fetch()];\\\\n                    case 1:\\\\n                        _a.sent();\\\\n                        this.render();\\\\n                        return [2];\\\\n                }\\\\n            });\\\\n        });\\\\n    };\\\\n    QiitaWidget.prototype.render = function () {\\\\n        this.presenter.renderUser();\\\\n    };\\\\n    QiitaWidget.defaultConf = {};\\\\n    return QiitaWidget;\\\\n}());\\\\n/* harmony default export */ __webpack_exports__[\\\\\\\"default\\\\\\\"] = (QiitaWidget);\\\\n//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9saWIvUWlpdGFXaWRnZXQudHM/ZGFkNyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSB5W29wWzBdICYgMiA/IFwicmV0dXJuXCIgOiBvcFswXSA/IFwidGhyb3dcIiA6IFwibmV4dFwiXSkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gWzAsIHQudmFsdWVdO1xuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gICAgfVxufTtcbmltcG9ydCB7IFFpaXRhSXRlbXMgfSBmcm9tIFwiLi9RaWl0YUl0ZW1zXCI7XG5pbXBvcnQgeyBRaWl0YVByZXNlbnRlciB9IGZyb20gXCIuL1FpaXRhUHJlc2VudGVyXCI7XG52YXIgUWlpdGFXaWRnZXQgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFFpaXRhV2lkZ2V0KGNvbmYpIHtcbiAgICAgICAgdGhpcy5jb25mID0gT2JqZWN0LmFzc2lnbih7fSwgUWlpdGFXaWRnZXQuZGVmYXVsdENvbmYsIGNvbmYpO1xuICAgICAgICB0aGlzLml0ZW1zID0gbmV3IFFpaXRhSXRlbXModGhpcy5jb25mKTtcbiAgICAgICAgdGhpcy5wcmVzZW50ZXIgPSBuZXcgUWlpdGFQcmVzZW50ZXIodGhpcy5pdGVtcywgdGhpcy5jb25mKTtcbiAgICB9XG4gICAgUWlpdGFXaWRnZXQucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0LCB0aGlzLml0ZW1zLmZldGNoKCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBRaWl0YVdpZGdldC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnByZXNlbnRlci5yZW5kZXJVc2VyKCk7XG4gICAgfTtcbiAgICBRaWl0YVdpZGdldC5kZWZhdWx0Q29uZiA9IHt9O1xuICAgIHJldHVybiBRaWl0YVdpZGdldDtcbn0oKSk7XG5leHBvcnQgZGVmYXVsdCBRaWl0YVdpZGdldDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2xpYi9RaWl0YVdpZGdldC50c1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\\\\n//# sourceURL=webpack-internal:///2\\\\n\\\");\\n\\n/***/ }),\\n/* 3 */\\n/*!*******************************!*\\\\\\n  !*** ./src/lib/QiitaItems.ts ***!\\n  \\\\*******************************/\\n/*! exports provided: QiitaItems */\\n/*! exports used: QiitaItems */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\neval(\\\"/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"a\\\\\\\", function() { return QiitaItems; });\\\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Util__ = __webpack_require__(/*! ../Util */ 0);\\\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__QiitaItemsApi__ = __webpack_require__(/*! ./QiitaItemsApi */ 4);\\\\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\\\\n    return new (P || (P = Promise))(function (resolve, reject) {\\\\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\\\\n        function rejected(value) { try { step(generator[\\\\\\\"throw\\\\\\\"](value)); } catch (e) { reject(e); } }\\\\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\\\\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\\\\n    });\\\\n};\\\\nvar __generator = (this && this.__generator) || function (thisArg, body) {\\\\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\\\\n    return g = { next: verb(0), \\\\\\\"throw\\\\\\\": verb(1), \\\\\\\"return\\\\\\\": verb(2) }, typeof Symbol === \\\\\\\"function\\\\\\\" && (g[Symbol.iterator] = function() { return this; }), g;\\\\n    function verb(n) { return function (v) { return step([n, v]); }; }\\\\n    function step(op) {\\\\n        if (f) throw new TypeError(\\\\\\\"Generator is already executing.\\\\\\\");\\\\n        while (_) try {\\\\n            if (f = 1, y && (t = y[op[0] & 2 ? \\\\\\\"return\\\\\\\" : op[0] ? \\\\\\\"throw\\\\\\\" : \\\\\\\"next\\\\\\\"]) && !(t = t.call(y, op[1])).done) return t;\\\\n            if (y = 0, t) op = [0, t.value];\\\\n            switch (op[0]) {\\\\n                case 0: case 1: t = op; break;\\\\n                case 4: _.label++; return { value: op[1], done: false };\\\\n                case 5: _.label++; y = op[1]; op = [0]; continue;\\\\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\\\\n                default:\\\\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\\\\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\\\\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\\\\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\\\\n                    if (t[2]) _.ops.pop();\\\\n                    _.trys.pop(); continue;\\\\n            }\\\\n            op = body.call(thisArg, _);\\\\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\\\\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\\\\n    }\\\\n};\\\\n\\\\n\\\\nvar QiitaItems = (function () {\\\\n    function QiitaItems(conf) {\\\\n        this.conf = Object.assign({}, QiitaItems.defaultConf, conf);\\\\n        this.api = new __WEBPACK_IMPORTED_MODULE_1__QiitaItemsApi__[\\\\\\\"a\\\\\\\" /* QiitaItemsApi */](this.conf);\\\\n    }\\\\n    QiitaItems.prototype.fetch = function () {\\\\n        return __awaiter(this, void 0, void 0, function () {\\\\n            var _a;\\\\n            return __generator(this, function (_b) {\\\\n                switch (_b.label) {\\\\n                    case 0:\\\\n                        _a = this;\\\\n                        return [4, this.api.fetch()];\\\\n                    case 1:\\\\n                        _a.articles = _b.sent();\\\\n                        return [2];\\\\n                }\\\\n            });\\\\n        });\\\\n    };\\\\n    QiitaItems.prototype.createOrder = function () {\\\\n        var order = this.conf.useShuffle\\\\n            ? __WEBPACK_IMPORTED_MODULE_0__Util__[\\\\\\\"c\\\\\\\" /* shuffleArray */](__WEBPACK_IMPORTED_MODULE_0__Util__[\\\\\\\"a\\\\\\\" /* initSerialNumArray */](this.articles.length))\\\\n            : __WEBPACK_IMPORTED_MODULE_0__Util__[\\\\\\\"a\\\\\\\" /* initSerialNumArray */](this.articles.length);\\\\n        return order.slice(0, this.conf.maxToShow);\\\\n    };\\\\n    QiitaItems.prototype.getArticlesToShow = function () {\\\\n        var order = this.createOrder();\\\\n        var articlesOrigin = (this.conf.sortByLike && !this.conf.useShuffle)\\\\n            ? __WEBPACK_IMPORTED_MODULE_0__Util__[\\\\\\\"d\\\\\\\" /* sortArray */](this.articles, 'likes_count')\\\\n            : this.articles;\\\\n        var articles = order.map(function (val) {\\\\n            return articlesOrigin[val];\\\\n        });\\\\n        return (this.conf.sortByLike && this.conf.useShuffle)\\\\n            ? __WEBPACK_IMPORTED_MODULE_0__Util__[\\\\\\\"d\\\\\\\" /* sortArray */](articles, 'likes_count')\\\\n            : articles;\\\\n    };\\\\n    QiitaItems.prototype.getUserToShow = function () {\\\\n        var user = Object.assign({}, this.articles[0].user);\\\\n        user.likes_count = this.countAllLikes();\\\\n        user.url = \\\\\\\"https://qiita.com/\\\\\\\" + user.id;\\\\n        return user;\\\\n    };\\\\n    QiitaItems.prototype.countAllLikes = function () {\\\\n        return this.articles.reduce(function (prev, item) {\\\\n            return prev + item.likes_count;\\\\n        }, 0);\\\\n    };\\\\n    QiitaItems.defaultConf = {\\\\n        maxToShow: 5,\\\\n        useShuffle: false,\\\\n        sortByLike: true\\\\n    };\\\\n    return QiitaItems;\\\\n}());\\\\n\\\\n//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9saWIvUWlpdGFJdGVtcy50cz84NmQ5Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IHlbb3BbMF0gJiAyID8gXCJyZXR1cm5cIiA6IG9wWzBdID8gXCJ0aHJvd1wiIDogXCJuZXh0XCJdKSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbMCwgdC52YWx1ZV07XG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgICB9XG59O1xuaW1wb3J0ICogYXMgVXRpbCBmcm9tIFwiLi4vVXRpbFwiO1xuaW1wb3J0IHsgUWlpdGFJdGVtc0FwaSB9IGZyb20gXCIuL1FpaXRhSXRlbXNBcGlcIjtcbnZhciBRaWl0YUl0ZW1zID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBRaWl0YUl0ZW1zKGNvbmYpIHtcbiAgICAgICAgdGhpcy5jb25mID0gT2JqZWN0LmFzc2lnbih7fSwgUWlpdGFJdGVtcy5kZWZhdWx0Q29uZiwgY29uZik7XG4gICAgICAgIHRoaXMuYXBpID0gbmV3IFFpaXRhSXRlbXNBcGkodGhpcy5jb25mKTtcbiAgICB9XG4gICAgUWlpdGFJdGVtcy5wcm90b3R5cGUuZmV0Y2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgdGhpcy5hcGkuZmV0Y2goKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmFydGljbGVzID0gX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBRaWl0YUl0ZW1zLnByb3RvdHlwZS5jcmVhdGVPcmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9yZGVyID0gdGhpcy5jb25mLnVzZVNodWZmbGVcbiAgICAgICAgICAgID8gVXRpbC5zaHVmZmxlQXJyYXkoVXRpbC5pbml0U2VyaWFsTnVtQXJyYXkodGhpcy5hcnRpY2xlcy5sZW5ndGgpKVxuICAgICAgICAgICAgOiBVdGlsLmluaXRTZXJpYWxOdW1BcnJheSh0aGlzLmFydGljbGVzLmxlbmd0aCk7XG4gICAgICAgIHJldHVybiBvcmRlci5zbGljZSgwLCB0aGlzLmNvbmYubWF4VG9TaG93KTtcbiAgICB9O1xuICAgIFFpaXRhSXRlbXMucHJvdG90eXBlLmdldEFydGljbGVzVG9TaG93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3JkZXIgPSB0aGlzLmNyZWF0ZU9yZGVyKCk7XG4gICAgICAgIHZhciBhcnRpY2xlc09yaWdpbiA9ICh0aGlzLmNvbmYuc29ydEJ5TGlrZSAmJiAhdGhpcy5jb25mLnVzZVNodWZmbGUpXG4gICAgICAgICAgICA/IFV0aWwuc29ydEFycmF5KHRoaXMuYXJ0aWNsZXMsICdsaWtlc19jb3VudCcpXG4gICAgICAgICAgICA6IHRoaXMuYXJ0aWNsZXM7XG4gICAgICAgIHZhciBhcnRpY2xlcyA9IG9yZGVyLm1hcChmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJ0aWNsZXNPcmlnaW5bdmFsXTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiAodGhpcy5jb25mLnNvcnRCeUxpa2UgJiYgdGhpcy5jb25mLnVzZVNodWZmbGUpXG4gICAgICAgICAgICA/IFV0aWwuc29ydEFycmF5KGFydGljbGVzLCAnbGlrZXNfY291bnQnKVxuICAgICAgICAgICAgOiBhcnRpY2xlcztcbiAgICB9O1xuICAgIFFpaXRhSXRlbXMucHJvdG90eXBlLmdldFVzZXJUb1Nob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB1c2VyID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5hcnRpY2xlc1swXS51c2VyKTtcbiAgICAgICAgdXNlci5saWtlc19jb3VudCA9IHRoaXMuY291bnRBbGxMaWtlcygpO1xuICAgICAgICB1c2VyLnVybCA9IFwiaHR0cHM6Ly9xaWl0YS5jb20vXCIgKyB1c2VyLmlkO1xuICAgICAgICByZXR1cm4gdXNlcjtcbiAgICB9O1xuICAgIFFpaXRhSXRlbXMucHJvdG90eXBlLmNvdW50QWxsTGlrZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFydGljbGVzLnJlZHVjZShmdW5jdGlvbiAocHJldiwgaXRlbSkge1xuICAgICAgICAgICAgcmV0dXJuIHByZXYgKyBpdGVtLmxpa2VzX2NvdW50O1xuICAgICAgICB9LCAwKTtcbiAgICB9O1xuICAgIFFpaXRhSXRlbXMuZGVmYXVsdENvbmYgPSB7XG4gICAgICAgIG1heFRvU2hvdzogNSxcbiAgICAgICAgdXNlU2h1ZmZsZTogZmFsc2UsXG4gICAgICAgIHNvcnRCeUxpa2U6IHRydWVcbiAgICB9O1xuICAgIHJldHVybiBRaWl0YUl0ZW1zO1xufSgpKTtcbmV4cG9ydCB7IFFpaXRhSXRlbXMgfTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2xpYi9RaWl0YUl0ZW1zLnRzXG4vLyBtb2R1bGUgaWQgPSAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\\\\n//# sourceURL=webpack-internal:///3\\\\n\\\");\\n\\n/***/ }),\\n/* 4 */\\n/*!**********************************!*\\\\\\n  !*** ./src/lib/QiitaItemsApi.ts ***!\\n  \\\\**********************************/\\n/*! exports provided: QiitaItemsApi */\\n/*! exports used: QiitaItemsApi */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\neval(\\\"/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"a\\\\\\\", function() { return QiitaItemsApi; });\\\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Api__ = __webpack_require__(/*! ./Api */ 5);\\\\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\\\\n    return new (P || (P = Promise))(function (resolve, reject) {\\\\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\\\\n        function rejected(value) { try { step(generator[\\\\\\\"throw\\\\\\\"](value)); } catch (e) { reject(e); } }\\\\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\\\\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\\\\n    });\\\\n};\\\\nvar __generator = (this && this.__generator) || function (thisArg, body) {\\\\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\\\\n    return g = { next: verb(0), \\\\\\\"throw\\\\\\\": verb(1), \\\\\\\"return\\\\\\\": verb(2) }, typeof Symbol === \\\\\\\"function\\\\\\\" && (g[Symbol.iterator] = function() { return this; }), g;\\\\n    function verb(n) { return function (v) { return step([n, v]); }; }\\\\n    function step(op) {\\\\n        if (f) throw new TypeError(\\\\\\\"Generator is already executing.\\\\\\\");\\\\n        while (_) try {\\\\n            if (f = 1, y && (t = y[op[0] & 2 ? \\\\\\\"return\\\\\\\" : op[0] ? \\\\\\\"throw\\\\\\\" : \\\\\\\"next\\\\\\\"]) && !(t = t.call(y, op[1])).done) return t;\\\\n            if (y = 0, t) op = [0, t.value];\\\\n            switch (op[0]) {\\\\n                case 0: case 1: t = op; break;\\\\n                case 4: _.label++; return { value: op[1], done: false };\\\\n                case 5: _.label++; y = op[1]; op = [0]; continue;\\\\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\\\\n                default:\\\\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\\\\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\\\\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\\\\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\\\\n                    if (t[2]) _.ops.pop();\\\\n                    _.trys.pop(); continue;\\\\n            }\\\\n            op = body.call(thisArg, _);\\\\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\\\\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\\\\n    }\\\\n};\\\\n\\\\nvar QiitaItemsApi = (function () {\\\\n    function QiitaItemsApi(conf) {\\\\n        this.conf = QiitaItemsApi.validateConf(Object.assign({}, QiitaItemsApi.defaultConf, conf));\\\\n        this.requestConf = {\\\\n            maxRequest: this.conf.maxRequest,\\\\n            cacheAge: this.conf.cacheAge,\\\\n            axiosRequestConfig: {\\\\n                method: 'get',\\\\n                url: \\\\\\\"https://qiita.com/api/v2/users/\\\\\\\" + this.conf.userId + \\\\\\\"/items\\\\\\\",\\\\n                params: {\\\\n                    page: 0,\\\\n                    per_page: this.conf.perPage\\\\n                }\\\\n            }\\\\n        };\\\\n        this.api = new __WEBPACK_IMPORTED_MODULE_0__Api__[\\\\\\\"a\\\\\\\" /* Api */](this.requestConf);\\\\n    }\\\\n    QiitaItemsApi.validateConf = function (conf) {\\\\n        if (conf.perPage <= 0) {\\\\n            conf.perPage = 1;\\\\n        }\\\\n        if (conf.perPage > 100) {\\\\n            conf.perPage = 100;\\\\n        }\\\\n        if (conf.maxRequest < 0) {\\\\n            conf.maxRequest = 0;\\\\n        }\\\\n        return conf;\\\\n    };\\\\n    QiitaItemsApi.prototype.fetch = function () {\\\\n        return __awaiter(this, void 0, void 0, function () {\\\\n            var counter, result, res, isContinue;\\\\n            return __generator(this, function (_a) {\\\\n                switch (_a.label) {\\\\n                    case 0:\\\\n                        counter = 0;\\\\n                        result = [];\\\\n                        _a.label = 1;\\\\n                    case 1:\\\\n                        if (!(counter < this.conf.maxRequest)) return [3, 3];\\\\n                        counter++;\\\\n                        this.createNextRequest();\\\\n                        return [4, this.fetchItems()];\\\\n                    case 2:\\\\n                        res = _a.sent();\\\\n                        isContinue = this.isThereNextPage(res);\\\\n                        result = result.concat(res);\\\\n                        if (isContinue) {\\\\n                            return [3, 1];\\\\n                        }\\\\n                        return [3, 3];\\\\n                    case 3: return [2, result];\\\\n                }\\\\n            });\\\\n        });\\\\n    };\\\\n    QiitaItemsApi.prototype.fetchItems = function () {\\\\n        return __awaiter(this, void 0, void 0, function () {\\\\n            return __generator(this, function (_a) {\\\\n                switch (_a.label) {\\\\n                    case 0: return [4, this.api.fetch(this.requestConf)];\\\\n                    case 1: return [2, _a.sent()];\\\\n                }\\\\n            });\\\\n        });\\\\n    };\\\\n    QiitaItemsApi.prototype.createNextRequest = function () {\\\\n        this.requestConf.axiosRequestConfig.params.page += 1;\\\\n    };\\\\n    QiitaItemsApi.prototype.isThereNextPage = function (list) {\\\\n        if (list.length === 0) {\\\\n            return false;\\\\n        }\\\\n        if (list.length < this.requestConf.axiosRequestConfig.params.per_page) {\\\\n            return false;\\\\n        }\\\\n        return true;\\\\n    };\\\\n    QiitaItemsApi.defaultConf = {\\\\n        userId: 'qiita',\\\\n        maxRequest: 5,\\\\n        perPage: 100,\\\\n        cacheAge: 15 * 60 * 1000\\\\n    };\\\\n    return QiitaItemsApi;\\\\n}());\\\\n\\\\n//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9saWIvUWlpdGFJdGVtc0FwaS50cz84OGQyIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IHlbb3BbMF0gJiAyID8gXCJyZXR1cm5cIiA6IG9wWzBdID8gXCJ0aHJvd1wiIDogXCJuZXh0XCJdKSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbMCwgdC52YWx1ZV07XG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgICB9XG59O1xuaW1wb3J0IHsgQXBpIH0gZnJvbSBcIi4vQXBpXCI7XG52YXIgUWlpdGFJdGVtc0FwaSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUWlpdGFJdGVtc0FwaShjb25mKSB7XG4gICAgICAgIHRoaXMuY29uZiA9IFFpaXRhSXRlbXNBcGkudmFsaWRhdGVDb25mKE9iamVjdC5hc3NpZ24oe30sIFFpaXRhSXRlbXNBcGkuZGVmYXVsdENvbmYsIGNvbmYpKTtcbiAgICAgICAgdGhpcy5yZXF1ZXN0Q29uZiA9IHtcbiAgICAgICAgICAgIG1heFJlcXVlc3Q6IHRoaXMuY29uZi5tYXhSZXF1ZXN0LFxuICAgICAgICAgICAgY2FjaGVBZ2U6IHRoaXMuY29uZi5jYWNoZUFnZSxcbiAgICAgICAgICAgIGF4aW9zUmVxdWVzdENvbmZpZzoge1xuICAgICAgICAgICAgICAgIG1ldGhvZDogJ2dldCcsXG4gICAgICAgICAgICAgICAgdXJsOiBcImh0dHBzOi8vcWlpdGEuY29tL2FwaS92Mi91c2Vycy9cIiArIHRoaXMuY29uZi51c2VySWQgKyBcIi9pdGVtc1wiLFxuICAgICAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgICAgICBwYWdlOiAwLFxuICAgICAgICAgICAgICAgICAgICBwZXJfcGFnZTogdGhpcy5jb25mLnBlclBhZ2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuYXBpID0gbmV3IEFwaSh0aGlzLnJlcXVlc3RDb25mKTtcbiAgICB9XG4gICAgUWlpdGFJdGVtc0FwaS52YWxpZGF0ZUNvbmYgPSBmdW5jdGlvbiAoY29uZikge1xuICAgICAgICBpZiAoY29uZi5wZXJQYWdlIDw9IDApIHtcbiAgICAgICAgICAgIGNvbmYucGVyUGFnZSA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbmYucGVyUGFnZSA+IDEwMCkge1xuICAgICAgICAgICAgY29uZi5wZXJQYWdlID0gMTAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb25mLm1heFJlcXVlc3QgPCAwKSB7XG4gICAgICAgICAgICBjb25mLm1heFJlcXVlc3QgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb25mO1xuICAgIH07XG4gICAgUWlpdGFJdGVtc0FwaS5wcm90b3R5cGUuZmV0Y2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjb3VudGVyLCByZXN1bHQsIHJlcywgaXNDb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50ZXIgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGNvdW50ZXIgPCB0aGlzLmNvbmYubWF4UmVxdWVzdCkpIHJldHVybiBbMywgM107XG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudGVyKys7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZU5leHRSZXF1ZXN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIHRoaXMuZmV0Y2hJdGVtcygpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNDb250aW51ZSA9IHRoaXMuaXNUaGVyZU5leHRQYWdlKHJlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQuY29uY2F0KHJlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNDb250aW51ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMywgMV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMsIDNdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbMiwgcmVzdWx0XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBRaWl0YUl0ZW1zQXBpLnByb3RvdHlwZS5mZXRjaEl0ZW1zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCwgdGhpcy5hcGkuZmV0Y2godGhpcy5yZXF1ZXN0Q29uZildO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBbMiwgX2Euc2VudCgpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBRaWl0YUl0ZW1zQXBpLnByb3RvdHlwZS5jcmVhdGVOZXh0UmVxdWVzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5yZXF1ZXN0Q29uZi5heGlvc1JlcXVlc3RDb25maWcucGFyYW1zLnBhZ2UgKz0gMTtcbiAgICB9O1xuICAgIFFpaXRhSXRlbXNBcGkucHJvdG90eXBlLmlzVGhlcmVOZXh0UGFnZSA9IGZ1bmN0aW9uIChsaXN0KSB7XG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA8IHRoaXMucmVxdWVzdENvbmYuYXhpb3NSZXF1ZXN0Q29uZmlnLnBhcmFtcy5wZXJfcGFnZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgUWlpdGFJdGVtc0FwaS5kZWZhdWx0Q29uZiA9IHtcbiAgICAgICAgdXNlcklkOiAncWlpdGEnLFxuICAgICAgICBtYXhSZXF1ZXN0OiA1LFxuICAgICAgICBwZXJQYWdlOiAxMDAsXG4gICAgICAgIGNhY2hlQWdlOiAxNSAqIDYwICogMTAwMFxuICAgIH07XG4gICAgcmV0dXJuIFFpaXRhSXRlbXNBcGk7XG59KCkpO1xuZXhwb3J0IHsgUWlpdGFJdGVtc0FwaSB9O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvbGliL1FpaXRhSXRlbXNBcGkudHNcbi8vIG1vZHVsZSBpZCA9IDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\\\\n//# sourceURL=webpack-internal:///4\\\\n\\\");\\n\\n/***/ }),\\n/* 5 */\\n/*!************************!*\\\\\\n  !*** ./src/lib/Api.ts ***!\\n  \\\\************************/\\n/*! exports provided: Api */\\n/*! exports used: Api */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\neval(\\\"/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"a\\\\\\\", function() { return Api; });\\\\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\\\\n    return new (P || (P = Promise))(function (resolve, reject) {\\\\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\\\\n        function rejected(value) { try { step(generator[\\\\\\\"throw\\\\\\\"](value)); } catch (e) { reject(e); } }\\\\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\\\\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\\\\n    });\\\\n};\\\\nvar __generator = (this && this.__generator) || function (thisArg, body) {\\\\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\\\\n    return g = { next: verb(0), \\\\\\\"throw\\\\\\\": verb(1), \\\\\\\"return\\\\\\\": verb(2) }, typeof Symbol === \\\\\\\"function\\\\\\\" && (g[Symbol.iterator] = function() { return this; }), g;\\\\n    function verb(n) { return function (v) { return step([n, v]); }; }\\\\n    function step(op) {\\\\n        if (f) throw new TypeError(\\\\\\\"Generator is already executing.\\\\\\\");\\\\n        while (_) try {\\\\n            if (f = 1, y && (t = y[op[0] & 2 ? \\\\\\\"return\\\\\\\" : op[0] ? \\\\\\\"throw\\\\\\\" : \\\\\\\"next\\\\\\\"]) && !(t = t.call(y, op[1])).done) return t;\\\\n            if (y = 0, t) op = [0, t.value];\\\\n            switch (op[0]) {\\\\n                case 0: case 1: t = op; break;\\\\n                case 4: _.label++; return { value: op[1], done: false };\\\\n                case 5: _.label++; y = op[1]; op = [0]; continue;\\\\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\\\\n                default:\\\\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\\\\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\\\\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\\\\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\\\\n                    if (t[2]) _.ops.pop();\\\\n                    _.trys.pop(); continue;\\\\n            }\\\\n            op = body.call(thisArg, _);\\\\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\\\\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\\\\n    }\\\\n};\\\\nvar Api = (function () {\\\\n    function Api(conf) {\\\\n        this.api = axiosCacheAdapter.setup({\\\\n            cache: {\\\\n                maxAge: conf.cacheAge,\\\\n                clearOnStale: false,\\\\n                debug: true\\\\n            }\\\\n        });\\\\n    }\\\\n    Api.prototype.fetch = function (conf) {\\\\n        return __awaiter(this, void 0, void 0, function () {\\\\n            var res;\\\\n            return __generator(this, function (_a) {\\\\n                res = this.api(conf.axiosRequestConfig);\\\\n                return [2, res.data];\\\\n            });\\\\n        });\\\\n    };\\\\n    return Api;\\\\n}());\\\\n\\\\n//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9saWIvQXBpLnRzPzE2ZGYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZShyZXN1bHQudmFsdWUpOyB9KS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0geVtvcFswXSAmIDIgPyBcInJldHVyblwiIDogb3BbMF0gPyBcInRocm93XCIgOiBcIm5leHRcIl0pICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFswLCB0LnZhbHVlXTtcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xuICAgIH1cbn07XG52YXIgQXBpID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBcGkoY29uZikge1xuICAgICAgICB0aGlzLmFwaSA9IGF4aW9zQ2FjaGVBZGFwdGVyLnNldHVwKHtcbiAgICAgICAgICAgIGNhY2hlOiB7XG4gICAgICAgICAgICAgICAgbWF4QWdlOiBjb25mLmNhY2hlQWdlLFxuICAgICAgICAgICAgICAgIGNsZWFyT25TdGFsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgZGVidWc6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIEFwaS5wcm90b3R5cGUuZmV0Y2ggPSBmdW5jdGlvbiAoY29uZikge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHJlcyA9IHRoaXMuYXBpKGNvbmYuYXhpb3NSZXF1ZXN0Q29uZmlnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIsIHJlcy5kYXRhXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBBcGk7XG59KCkpO1xuZXhwb3J0IHsgQXBpIH07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9saWIvQXBpLnRzXG4vLyBtb2R1bGUgaWQgPSA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\\\\n//# sourceURL=webpack-internal:///5\\\\n\\\");\\n\\n/***/ }),\\n/* 6 */\\n/*!***********************************!*\\\\\\n  !*** ./src/lib/QiitaPresenter.ts ***!\\n  \\\\***********************************/\\n/*! exports provided: QiitaPresenter */\\n/*! exports used: QiitaPresenter */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\neval(\\\"/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\"a\\\\\\\", function() { return QiitaPresenter; });\\\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Util__ = __webpack_require__(/*! ../Util */ 0);\\\\n\\\\nvar QiitaPresenter = (function () {\\\\n    function QiitaPresenter(items, conf) {\\\\n        this.items = items;\\\\n        this.conf = Object.assign({}, QiitaPresenter.defaultConf, conf);\\\\n        this.userTemplate = document.querySelector(this.conf.userTemplate);\\\\n        this.userDest = document.querySelector(this.conf.userDest);\\\\n        this.articleTemplate = document.querySelector(this.conf.articleTemplate);\\\\n        this.articleDest = document.querySelector(this.conf.articleDest);\\\\n    }\\\\n    QiitaPresenter.prototype.renderUser = function () {\\\\n        var _this = this;\\\\n        console.log(this.items);\\\\n        var callback = function (template) {\\\\n            var fragment = document.importNode(template.content, true);\\\\n            Object.entries(_this.items.getUserToShow()).forEach(function (kv) {\\\\n                _this.fillTemplate(fragment, kv);\\\\n            });\\\\n            return fragment;\\\\n        };\\\\n        this.renderView(this.userTemplate, this.userDest, callback);\\\\n    };\\\\n    QiitaPresenter.prototype.renderArticles = function () {\\\\n        var _this = this;\\\\n        var callback = function (template) {\\\\n            var fragment = document.createDocumentFragment();\\\\n            _this.items.getArticlesToShow().forEach(function (item) {\\\\n                fragment.appendChild(_this.createArticleFragment(template, item));\\\\n            });\\\\n            return fragment;\\\\n        };\\\\n        this.renderView(this.articleTemplate, this.articleDest, callback);\\\\n    };\\\\n    QiitaPresenter.prototype.createArticleFragment = function (template, content) {\\\\n        var _this = this;\\\\n        var fragment = document.importNode(template.content, true);\\\\n        Object.entries(content).forEach(function (kv) {\\\\n            return _this.fillTemplate(fragment, kv);\\\\n        });\\\\n        return fragment;\\\\n    };\\\\n    QiitaPresenter.prototype.renderView = function (template, dest, callback) {\\\\n        if (template === null) {\\\\n            throw new Error(\\\\\\\"Could not find template! conf \\\\\\\" + JSON.stringify(this.conf));\\\\n        }\\\\n        if (dest === null) {\\\\n            throw new Error(\\\\\\\"Could not find dest! conf \\\\\\\" + JSON.stringify(this.conf));\\\\n        }\\\\n        var fragments = callback(template);\\\\n        dest.appendChild(fragments);\\\\n    };\\\\n    QiitaPresenter.prototype.fillTemplate = function (fragment, kv) {\\\\n        var key = kv[0];\\\\n        var val = kv[1];\\\\n        var selector = \\\\\\\".js-\\\\\\\" + key.replace(/_/g, '-');\\\\n        var target = fragment.querySelector(selector);\\\\n        if (target === null || val === null)\\\\n            return;\\\\n        this.fillContent(key, val, target);\\\\n    };\\\\n    QiitaPresenter.prototype.fillContent = function (key, content, template) {\\\\n        if (typeof content === 'undefined')\\\\n            return;\\\\n        var val = (typeof content === 'number') ? __WEBPACK_IMPORTED_MODULE_0__Util__[\\\\\\\"b\\\\\\\" /* numToString */](content) : content;\\\\n        if (content === null)\\\\n            return;\\\\n        switch (key) {\\\\n            case 'url':\\\\n            case 'website_url':\\\\n                template.setAttribute('href', val);\\\\n                break;\\\\n            case 'profile_image_url':\\\\n                template.setAttribute('src', val);\\\\n                break;\\\\n            case 'tags':\\\\n                val.forEach(function (tag) {\\\\n                    var li = document.createElement('li');\\\\n                    li.innerText = tag.name;\\\\n                    template.appendChild(li);\\\\n                });\\\\n                break;\\\\n            default:\\\\n                template.textContent = val;\\\\n                break;\\\\n        }\\\\n    };\\\\n    QiitaPresenter.defaultConf = {\\\\n        userDest: '#qiita-user',\\\\n        userTemplate: '#qiita-user-tpl',\\\\n        articleDest: '#qiita-article',\\\\n        articleTemplate: '#qiita-article-tpl',\\\\n    };\\\\n    return QiitaPresenter;\\\\n}());\\\\n\\\\n//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9saWIvUWlpdGFQcmVzZW50ZXIudHM/YzBmNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBVdGlsIGZyb20gJy4uL1V0aWwnO1xudmFyIFFpaXRhUHJlc2VudGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBRaWl0YVByZXNlbnRlcihpdGVtcywgY29uZikge1xuICAgICAgICB0aGlzLml0ZW1zID0gaXRlbXM7XG4gICAgICAgIHRoaXMuY29uZiA9IE9iamVjdC5hc3NpZ24oe30sIFFpaXRhUHJlc2VudGVyLmRlZmF1bHRDb25mLCBjb25mKTtcbiAgICAgICAgdGhpcy51c2VyVGVtcGxhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuY29uZi51c2VyVGVtcGxhdGUpO1xuICAgICAgICB0aGlzLnVzZXJEZXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLmNvbmYudXNlckRlc3QpO1xuICAgICAgICB0aGlzLmFydGljbGVUZW1wbGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5jb25mLmFydGljbGVUZW1wbGF0ZSk7XG4gICAgICAgIHRoaXMuYXJ0aWNsZURlc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuY29uZi5hcnRpY2xlRGVzdCk7XG4gICAgfVxuICAgIFFpaXRhUHJlc2VudGVyLnByb3RvdHlwZS5yZW5kZXJVc2VyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLml0ZW1zKTtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gKHRlbXBsYXRlKSB7XG4gICAgICAgICAgICB2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5pbXBvcnROb2RlKHRlbXBsYXRlLmNvbnRlbnQsIHRydWUpO1xuICAgICAgICAgICAgT2JqZWN0LmVudHJpZXMoX3RoaXMuaXRlbXMuZ2V0VXNlclRvU2hvdygpKS5mb3JFYWNoKGZ1bmN0aW9uIChrdikge1xuICAgICAgICAgICAgICAgIF90aGlzLmZpbGxUZW1wbGF0ZShmcmFnbWVudCwga3YpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZnJhZ21lbnQ7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucmVuZGVyVmlldyh0aGlzLnVzZXJUZW1wbGF0ZSwgdGhpcy51c2VyRGVzdCwgY2FsbGJhY2spO1xuICAgIH07XG4gICAgUWlpdGFQcmVzZW50ZXIucHJvdG90eXBlLnJlbmRlckFydGljbGVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiAodGVtcGxhdGUpIHtcbiAgICAgICAgICAgIHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICAgICAgICAgIF90aGlzLml0ZW1zLmdldEFydGljbGVzVG9TaG93KCkuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKF90aGlzLmNyZWF0ZUFydGljbGVGcmFnbWVudCh0ZW1wbGF0ZSwgaXRlbSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZnJhZ21lbnQ7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucmVuZGVyVmlldyh0aGlzLmFydGljbGVUZW1wbGF0ZSwgdGhpcy5hcnRpY2xlRGVzdCwgY2FsbGJhY2spO1xuICAgIH07XG4gICAgUWlpdGFQcmVzZW50ZXIucHJvdG90eXBlLmNyZWF0ZUFydGljbGVGcmFnbWVudCA9IGZ1bmN0aW9uICh0ZW1wbGF0ZSwgY29udGVudCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5pbXBvcnROb2RlKHRlbXBsYXRlLmNvbnRlbnQsIHRydWUpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhjb250ZW50KS5mb3JFYWNoKGZ1bmN0aW9uIChrdikge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmZpbGxUZW1wbGF0ZShmcmFnbWVudCwga3YpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZyYWdtZW50O1xuICAgIH07XG4gICAgUWlpdGFQcmVzZW50ZXIucHJvdG90eXBlLnJlbmRlclZpZXcgPSBmdW5jdGlvbiAodGVtcGxhdGUsIGRlc3QsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICh0ZW1wbGF0ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgdGVtcGxhdGUhIGNvbmYgXCIgKyBKU09OLnN0cmluZ2lmeSh0aGlzLmNvbmYpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVzdCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgZGVzdCEgY29uZiBcIiArIEpTT04uc3RyaW5naWZ5KHRoaXMuY29uZikpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBmcmFnbWVudHMgPSBjYWxsYmFjayh0ZW1wbGF0ZSk7XG4gICAgICAgIGRlc3QuYXBwZW5kQ2hpbGQoZnJhZ21lbnRzKTtcbiAgICB9O1xuICAgIFFpaXRhUHJlc2VudGVyLnByb3RvdHlwZS5maWxsVGVtcGxhdGUgPSBmdW5jdGlvbiAoZnJhZ21lbnQsIGt2KSB7XG4gICAgICAgIHZhciBrZXkgPSBrdlswXTtcbiAgICAgICAgdmFyIHZhbCA9IGt2WzFdO1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSBcIi5qcy1cIiArIGtleS5yZXBsYWNlKC9fL2csICctJyk7XG4gICAgICAgIHZhciB0YXJnZXQgPSBmcmFnbWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgICAgaWYgKHRhcmdldCA9PT0gbnVsbCB8fCB2YWwgPT09IG51bGwpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuZmlsbENvbnRlbnQoa2V5LCB2YWwsIHRhcmdldCk7XG4gICAgfTtcbiAgICBRaWl0YVByZXNlbnRlci5wcm90b3R5cGUuZmlsbENvbnRlbnQgPSBmdW5jdGlvbiAoa2V5LCBjb250ZW50LCB0ZW1wbGF0ZSkge1xuICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgdmFsID0gKHR5cGVvZiBjb250ZW50ID09PSAnbnVtYmVyJykgPyBVdGlsLm51bVRvU3RyaW5nKGNvbnRlbnQpIDogY29udGVudDtcbiAgICAgICAgaWYgKGNvbnRlbnQgPT09IG51bGwpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICd1cmwnOlxuICAgICAgICAgICAgY2FzZSAnd2Vic2l0ZV91cmwnOlxuICAgICAgICAgICAgICAgIHRlbXBsYXRlLnNldEF0dHJpYnV0ZSgnaHJlZicsIHZhbCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdwcm9maWxlX2ltYWdlX3VybCc6XG4gICAgICAgICAgICAgICAgdGVtcGxhdGUuc2V0QXR0cmlidXRlKCdzcmMnLCB2YWwpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAndGFncyc6XG4gICAgICAgICAgICAgICAgdmFsLmZvckVhY2goZnVuY3Rpb24gKHRhZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgICAgICAgICAgICAgICAgICBsaS5pbm5lclRleHQgPSB0YWcubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUuYXBwZW5kQ2hpbGQobGkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZS50ZXh0Q29udGVudCA9IHZhbDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH07XG4gICAgUWlpdGFQcmVzZW50ZXIuZGVmYXVsdENvbmYgPSB7XG4gICAgICAgIHVzZXJEZXN0OiAnI3FpaXRhLXVzZXInLFxuICAgICAgICB1c2VyVGVtcGxhdGU6ICcjcWlpdGEtdXNlci10cGwnLFxuICAgICAgICBhcnRpY2xlRGVzdDogJyNxaWl0YS1hcnRpY2xlJyxcbiAgICAgICAgYXJ0aWNsZVRlbXBsYXRlOiAnI3FpaXRhLWFydGljbGUtdHBsJyxcbiAgICB9O1xuICAgIHJldHVybiBRaWl0YVByZXNlbnRlcjtcbn0oKSk7XG5leHBvcnQgeyBRaWl0YVByZXNlbnRlciB9O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvbGliL1FpaXRhUHJlc2VudGVyLnRzXG4vLyBtb2R1bGUgaWQgPSA2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\\\\n//# sourceURL=webpack-internal:///6\\\\n\\\");\\n\\n/***/ })\\n/******/ ])[\\\"default\\\"];\\n});\"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/*!***********************************!*\
  !*** ./src/iframe/pickDataset.ts ***!
  \***********************************/
/*! exports provided: pickDataset */
/*! exports used: pickDataset */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = pickDataset;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Util__ = __webpack_require__(/*! ../Util */ 0);\n\nfunction pickDataset(el) {\n    var result = {};\n    if (Object(__WEBPACK_IMPORTED_MODULE_0__Util__[\"a\" /* isType */])(el.dataset['userId'], 'string')) {\n        result['userId'] = el.dataset['userId'];\n    }\n    ['sortByLike', 'useShuffle'].forEach(function (key) {\n        if (Object(__WEBPACK_IMPORTED_MODULE_0__Util__[\"a\" /* isType */])(el.dataset[key], 'string')) {\n            result[key] = Object(__WEBPACK_IMPORTED_MODULE_0__Util__[\"b\" /* toBoolean */])(el.dataset[key]);\n        }\n    });\n    ['perPage', 'maxToShow', 'maxRequest', 'cacheAge'].forEach(function (key) {\n        if (Object(__WEBPACK_IMPORTED_MODULE_0__Util__[\"a\" /* isType */])(el.dataset[key], 'string')) {\n            result[key] = parseInt(el.dataset[key], 10);\n        }\n    });\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaWZyYW1lL3BpY2tEYXRhc2V0LnRzP2ViMWIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNUeXBlLCB0b0Jvb2xlYW4gfSBmcm9tIFwiLi4vVXRpbFwiO1xuZXhwb3J0IGZ1bmN0aW9uIHBpY2tEYXRhc2V0KGVsKSB7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChpc1R5cGUoZWwuZGF0YXNldFsndXNlcklkJ10sICdzdHJpbmcnKSkge1xuICAgICAgICByZXN1bHRbJ3VzZXJJZCddID0gZWwuZGF0YXNldFsndXNlcklkJ107XG4gICAgfVxuICAgIFsnc29ydEJ5TGlrZScsICd1c2VTaHVmZmxlJ10uZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChpc1R5cGUoZWwuZGF0YXNldFtrZXldLCAnc3RyaW5nJykpIHtcbiAgICAgICAgICAgIHJlc3VsdFtrZXldID0gdG9Cb29sZWFuKGVsLmRhdGFzZXRba2V5XSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBbJ3BlclBhZ2UnLCAnbWF4VG9TaG93JywgJ21heFJlcXVlc3QnLCAnY2FjaGVBZ2UnXS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKGlzVHlwZShlbC5kYXRhc2V0W2tleV0sICdzdHJpbmcnKSkge1xuICAgICAgICAgICAgcmVzdWx0W2tleV0gPSBwYXJzZUludChlbC5kYXRhc2V0W2tleV0sIDEwKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9pZnJhbWUvcGlja0RhdGFzZXQudHNcbi8vIG1vZHVsZSBpZCA9IDEwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/*!****************************************!*\
  !*** ./src/iframe/calcIframeHeight.ts ***!
  \****************************************/
/*! exports provided: calcIframeHeight */
/*! exports used: calcIframeHeight */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = calcIframeHeight;\nfunction calcIframeHeight(iframe) {\n    var setHeight = function () {\n        iframe.height = iframe.contentWindow.document.documentElement.scrollHeight.toString();\n    };\n    var updateHeight = function () {\n        setHeight();\n        iframe.removeEventListener('load', updateHeight);\n    };\n    setHeight();\n    iframe.addEventListener('load', updateHeight);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaWZyYW1lL2NhbGNJZnJhbWVIZWlnaHQudHM/MTA0NCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gY2FsY0lmcmFtZUhlaWdodChpZnJhbWUpIHtcbiAgICB2YXIgc2V0SGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZnJhbWUuaGVpZ2h0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodC50b1N0cmluZygpO1xuICAgIH07XG4gICAgdmFyIHVwZGF0ZUhlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2V0SGVpZ2h0KCk7XG4gICAgICAgIGlmcmFtZS5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkJywgdXBkYXRlSGVpZ2h0KTtcbiAgICB9O1xuICAgIHNldEhlaWdodCgpO1xuICAgIGlmcmFtZS5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgdXBkYXRlSGVpZ2h0KTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2lmcmFtZS9jYWxjSWZyYW1lSGVpZ2h0LnRzXG4vLyBtb2R1bGUgaWQgPSAxMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///11\n");

/***/ })
/******/ ]);